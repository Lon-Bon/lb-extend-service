apply plugin: 'maven-publish'

Properties localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.getRootDir().getAbsolutePath() + "/local.properties"))

def thirdPartAAR = ext.has('THIRD_PARTY_AAR') && THIRD_PARTY_AAR

group = properties.getOrDefault("PUBLISH_GROUP", "com.lonbon.security")
version = properties.getOrDefault("PUBLISH_VERSION", "1.0.0")
def ARTIFACT_ID = properties.getOrDefault("PUBLISH_ARTIFACT_ID", project.name)

/**
 * 本地仓库url
 */
def MAVEN_LOCAL_PATH = properties.getOrDefault("MAVEN_LOCAL_PATH", "repo")
def mavenRepoLocalUrl = MAVEN_LOCAL_PATH.startsWith("/") ? MAVEN_LOCAL_PATH : "$rootDir/$MAVEN_LOCAL_PATH"

def MAVEN_REPO_TYPE = properties.getOrDefault("MAVEN_REPO_TYPE", "LOCAL")
def MAVEN_REMOTE_URL_RELEASE = properties.getOrDefault("MAVEN_REMOTE_URL_RELEASE", "http://voip.lonbon.com:8092/repository/maven-releases/")
def MAVEN_REMOTE_URL_SNAPSHOT = properties.getOrDefault("MAVEN_REMOTE_URL_SNAPSHOT", "http://voip.lonbon.com:8092/repository/maven-snapshots/")
def MAVEN_REMOTE_NAME = localProperties.getOrDefault("MAVEN_REMOTE_NAME", "lb")
def MAVEN_REMOTE_PASSWORD = localProperties.getOrDefault("MAVEN_REMOTE_PASSWORD", "Ll168888")


/**
 * 远程仓库url
 */
def mavenRepoRemoteUrl = project.version.contains("SNAPSHOT") ? MAVEN_REMOTE_URL_SNAPSHOT : MAVEN_REMOTE_URL_RELEASE

println "groupId->${group},artifactId->${ARTIFACT_ID},versionId->${version},maven_repo_type->${MAVEN_REPO_TYPE},maven_url->${mavenRepoRemoteUrl}, thirdPartAAR->${thirdPartAAR}"

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}


task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.hasProperty("kotlin")) {
        from android.sourceSets.main.java.getSrcDirs()
    } else if (project.hasProperty("android")) {
        from android.sourceSets.main.java.sourceFiles
    } else {
        from sourceSets.main.allSource
    }
}

//def libsAarFiles = fileTree(dir: 'libs', include: ['*.aar'])

afterEvaluate {
    def publishThirdPartAAR = thirdPartAAR
    publishing {
        repositories {
            maven {
                allowInsecureProtocol true
                setUrl(MAVEN_REPO_TYPE == "REMOTE" ? mavenRepoRemoteUrl : mavenRepoLocalUrl)
                if (MAVEN_REPO_TYPE == "REMOTE") {
                    credentials {
                        username = MAVEN_REMOTE_NAME
                        password = MAVEN_REMOTE_PASSWORD
                    }
                }
            }
        }

        publications {

            release(MavenPublication) {
                if (publishThirdPartAAR) {
                    groupId = project.group
                    version = project.version
                    artifactId = ARTIFACT_ID
                    def aarFile = fileTree(dir: 'libs', include: ['*.aar'])[0]
                    println "aarFile->${aarFile.absolutePath}"
                    artifact(aarFile)
                } else {
                    from components.release
                    groupId = project.group
                    version = project.version
                    artifactId = ARTIFACT_ID
//                artifact androidJavadocsJar
                    artifact androidSourcesJar
                }


//                pom.withXml {
//                    def root = asNode()
//                    def dependenciesNode = root.dependencies[0] ?: root.appendNode('dependencies')
//
//                    // 为每个 AAR 添加一个依赖传递
//                    libsAarFiles.each { aarFile ->
//                        def artifactId_suffix = aarFile.name.take(aarFile.name.lastIndexOf('.')).toLowerCase()
//                        def dependencyNode = dependenciesNode.appendNode('dependency')
//                        dependencyNode.appendNode('groupId', groupId)
//                        dependencyNode.appendNode('artifactId', "$ARTIFACT_ID-${artifactId_suffix}")
//                        dependencyNode.appendNode('version', version)
//                        dependencyNode.appendNode('scope', 'compile')
//                    }
//                }
            }
        }

    }
}